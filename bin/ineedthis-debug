#!/usr/bin/env node

var Module = require('module').Module;
var resolve = require('resolve');
var path = require('path');
var stack = require('callsite');
var reload = require('require-reload')(require);
var chokidar = require('chokidar');
var ineedthis = require('ineedthis');
var start = ineedthis.start;
var stop = ineedthis.stop;

var cwd = process.cwd();

// filename -> [service names defined in it]
var serviceDefs = Object.create(null);

// filename -> [filenames that required it]
var depGraph = Object.create(null);

// filename -> [filenames it has required]
var requireGraph = Object.create(null);

// absolute path -> bool; to be sure not to double-register filesystem
// watchers
const watchedPaths = Object.create(null);

const wrapCreateService = (realCreateService) => {
  return function () {
    const path = stack()[1].getFileName();

    const x = realCreateService.apply(null, arguments);

    if (!serviceDefs[path]) {
      serviceDefs[path] = [];
    }
    const name = x.serviceName;
    if (!serviceDefs[path].includes(name)) {
      serviceDefs[path].push(name);
    }

    return x;
  };
};

// Override createService() to track what files services are defined in
// TODO: use wrapCreateService here
const realCreateService = ineedthis.createService;
ineedthis.createService = function(name, service) {
  const path = stack()[1].getFileName();

  if (!serviceDefs[path]) {
    serviceDefs[path] = [];
  }
  if (!serviceDefs[path].includes(name)) {
    serviceDefs[path].push(name);
  }

  return realCreateService(name, service);
};

// Override require() to track the entire module dependency graph
const modulePrototype = Module.prototype;
const originalRequire = modulePrototype.require;
modulePrototype.require = function (moduleName) {
  const filePath = resolve.sync(moduleName, {
    preserveSymlinks: false,
    basedir: path.dirname(this.filename),
    extensions: ['.js', '.jsx', '.ts', '.tsx', '.json']
  });

  // Here, we are tracking that moduleName was require()'d from this.filename.
  // Make sure those files are being watched:
  const watchPath = path.dirname(filePath);
  if (path.isAbsolute(watchPath) && !watchedPaths[watchPath]) {
    watcher.add(watchPath);
    watchedPaths[watchPath] = true;
  }

  var requiredBy = depGraph[this.filename];
  if (!requiredBy) {
    requiredBy = depGraph[this.filename] = [];
  }
  if (!requiredBy.includes(filePath)) {
    requiredBy.push(filePath);
  }

  var dependsOn = requireGraph[filePath];
  if (!dependsOn) {
    dependsOn = requireGraph[filePath] = [];
  }
  if (!dependsOn.includes(this.filename)) {
    dependsOn.push(this.filename);
  }

  const val = originalRequire.call(this, moduleName);

  // Use a special flag to detect service-specific variants of
  // createService and set them up properly for hot-reloading (We need
  // to reload when the callers of these "createService variants" are
  // changed, not just the direct createService callers are changed)
  //
  // TODO: This special property can be a constant exported by
  // ineedthis instead of a magic string name like this.
  if (typeof val === 'function' && val.__ineedthis__isCreateService) {
    return wrapCreateService(val);
  }

  return val;
};

var watcher = chokidar.watch(
  module.paths.concat(path.join(cwd)), {
    ignored: /(^|[\/\\])\../,
    persistent: true
  });

var targetSystem;
var restarting = false;

function taintedFrom(graph, path) {
  var a = new Set([path]),
    unvisited = [path];

  while (unvisited.length > 0) {
    var at = unvisited.shift();
    (graph[at] || []).filter(p => !a.has(p)).forEach(p => {
      a.add(p);
      unvisited.push(p);
    });
  }
  return Array.from(a);
}

var uniq = a => [...new Set(a)];
var flatten = a => [].concat(...a);

var verbose = process.env.INEEDTHIS_DEBUG === 'true';

var log = console.log.bind(console);
// Add event listeners.
watcher
  .on('change', path => {
    var startTime = Date.now();

    var affected = taintedFrom(requireGraph, path).filter(function(p) {
      return p !== __filename;
    });

    var affectedServices =
      uniq(flatten(affected.map(p => serviceDefs[p]).filter(Boolean)));

    if (verbose) {
      log(`File ${path} has been changed`);
      log(
        '  Affected services:', affectedServices,
        '\n  Already restarting: ', restarting
      );
    }

    if (affectedServices && affectedServices.length>0 && !restarting) {
      log('Restarting services: ', affectedServices.join(' '));
      restarting = true;

      var shutdown;
      ineedthis.stopPartial(targetSystem, affectedServices).then(shutdown_ => {
        shutdown = shutdown_;

        log('Reloading code for affected modules...');
        if (verbose) {
          log('Reloading', affected.length, 'modules');
        }

        var i = 0;
        affected.forEach(p => {
          if (verbose) {
            log('Start reload: ', p);
          }

          try {
            reload(p);
          } catch (e) {
            console.error('Failed reloading', p, e);
          }

          if (verbose) {
            log('Done reload: ', p, ++i);
          }
        });

        return shutdown;
      }).catch(e => {
        console.error('Error during reload: ', e);
      }).then(() => {
        log('Done reloading code');
        return ineedthis.startPartial(targetSystem, shutdown);
      }).then(newSys => {
        log(
          'Done restarting services! in',
          ((Date.now() - startTime) / 1000).toLocaleString() + 's'
        );
        targetSystem = newSys;
        restarting = false;
      }).catch(e => {
        console.error('Error restarting services', e);
      });
    }
  });

function load(p) {
  var m = require(resolve.sync(p, {
    basedir: cwd,
    extensions: ['.js', '.jsx', '.ts', '.tsx', '.json'],
    // This allows relative paths:
    paths: [cwd]
  }));
  return (m.__esModule && m.default) ? m.default : m;
}

function usage() {
  console.error(
'USAGE: ineedthis-debug [-r MODULE] [-h] SERVICE_MODULE...\n' +
'\n' +
'Launches the given SERVICE_MODULEs with ineedthis.start() and hot reload\n' +
'any changed files and their respective services.\n' +
'\n' +
'   -r MODULE     Require module before launching\n' +
'   -h            Print this help message'
  );
}

var args = process.argv.slice(2),
  arg;

if (args.indexOf('-h') !== -1) {
  usage();
  process.exit();
}

for (var i = 0; i < args.length; ++i) {
  arg = args[i];
  if (arg === '-r') {
    arg = args[i + 1];
    if (!arg) {
      console.error('ERROR: No module provided to -r to be required');
      process.exit(1);
    }
    load(arg);
    args.splice(i, 2);
    i--;
  }
}

start(args.map(load)).then(function (system) {
  targetSystem = system;
  var stopping = false;
  process.on('SIGINT', function () {
    if (stopping) {
      process.exit(1);
    }
    stopping = true;

    console.error('Shutting down...');
    stop(system).then(() => {
      console.log('Shutdown complete.');
      process.exit(0);
    }).catch(function (e) {
      console.error('Could not shut down', e);
      process.exit(1);
    });
  });
}, function (err) {
  console.error('Startup error:', err);
  process.exit(1);
});
