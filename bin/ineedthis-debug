#!/usr/bin/env node

var Module = require('module').Module;
var resolve = require('resolve');
var path = require('path');
var stack = require('callsite');
var reload = require('require-reload')(require);
var chokidar = require('chokidar');
var ineedthis = require('ineedthis');
var start = ineedthis.start;
var stop = ineedthis.stop;

var cwd = process.cwd();

// filename -> [service names defined in it]
var serviceDefs = Object.create(null);

// filename -> [filenames that required it]
var depGraph = Object.create(null);

// filename -> [filenames it has required]
var requireGraph = Object.create(null);

// Override createService() to track what files services are defined in
const realCreateService = ineedthis.createService;
ineedthis.createService = function(name, service) {
  const path = stack()[1].getFileName();

  if (!serviceDefs[path]) {
    serviceDefs[path] = [];
  }
  if (!serviceDefs[path].includes(name)) {
    serviceDefs[path].push(name);
  }

  return realCreateService(name, service);
};

// Override require() to track the entire module dependency graph
const modulePrototype = Module.prototype;
const originalRequire = modulePrototype.require;
modulePrototype.require = function (moduleName) {
  const filePath = resolve.sync(moduleName, {
    basedir: path.dirname(this.filename),
    extensions: ['.js', '.jsx', '.ts', '.tsx', '.json']
  });

  // Here, we are tracking that moduleName was require()'d from this.filename.
  // Make sure those files are being watched:
  watcher.add(filePath);

  var requiredBy = depGraph[this.filename];
  if (!requiredBy) {
    requiredBy = depGraph[this.filename] = [];
  }
  if (!requiredBy.includes(filePath)) {
    requiredBy.push(filePath);
  }

  var dependsOn = requireGraph[filePath];
  if (!dependsOn) {
    dependsOn = requireGraph[filePath] = [];
  }
  if (!dependsOn.includes(this.filename)) {
    dependsOn.push(this.filename);
  }

  return originalRequire.call(this, moduleName);
};

var watcher = chokidar.watch(
  module.paths.concat(path.join(cwd)), {
    ignored: /(^|[\/\\])\../,
    persistent: true
  });

var targetSystem;
var restarting = false;

function taintedFrom(graph, path) {
  var a = new Set([path]),
    unvisited = [path];

  while (unvisited.length > 0) {
    var at = unvisited.shift();
    (graph[at] || []).filter(p => !a.has(p)).forEach(p => {
      a.add(p);
      unvisited.push(p);
    });
  }
  return Array.from(a);
}

const uniq = a => [...new Set(a)];
const flatten = a => [].concat(...a);

var log = console.log.bind(console);
// Add event listeners.
watcher
  .on('change', path => {
    var affected = taintedFrom(requireGraph, path).filter(function(p) {
      return p !== __filename;
    });

    var affectedServices =
      uniq(flatten(affected.map(p => serviceDefs[p]).filter(Boolean)));

    log(`File ${path} has been changed`);

    if (affectedServices && affectedServices.length>0 && !restarting) {
      console.log('Restarting services: ', affectedServices.join(' '));
      restarting = true;
      ineedthis.stopPartial(targetSystem, affectedServices).then(shutdown => {
        console.log('Reloading code for affected modules...');
        affected.forEach(p => reload(p));
        console.log('Done reloading code');
        ineedthis.startPartial(targetSystem, shutdown).then(newSys => {
          console.log('Done restarting services!');
          targetSystem = newSys;
          restarting = false;
        });
      });
    }
  });

function load(p) {
  var m = require(resolve.sync(p, {
    basedir: cwd,
    extensions: ['.js', '.jsx', '.ts', '.tsx', '.json'],
    // This allows relative paths:
    paths: [cwd]
  }));
  return (m.__esModule && m.default) ? m.default : m;
}

function usage() {
  console.error(
'USAGE: ineedthis-debug [-r MODULE] [-h] SERVICE_MODULE...\n' +
'\n' +
'Launches the given SERVICE_MODULEs with ineedthis.start() and hot reload\n' +
'any changed files and their respective services.\n' +
'\n' +
'   -r MODULE     Require module before launching\n' +
'   -h            Print this help message'
  );
}

var args = process.argv.slice(2),
  arg;

if (args.indexOf('-h') !== -1) {
  usage();
  process.exit();
}

for (var i = 0; i < args.length; ++i) {
  arg = args[i];
  if (arg === '-r') {
    arg = args[i + 1];
    if (!arg) {
      console.error('ERROR: No module provided to -r to be required');
      process.exit(1);
    }
    load(arg);
    args.splice(i, 2);
    i--;
  }
}

start(args.map(load)).then(function (system) {
  targetSystem = system;
  var stopping = false;
  process.on('SIGINT', function () {
    if (stopping) {
      process.exit(1);
    }
    stopping = true;

    console.error('Shutting down...');
    stop(system).then(() => {
      console.log('Shutdown complete.');
    }).catch(function (e) {
      console.error('Could not shut down', e);
    });
  });
}, function (err) {
  console.error('Startup error:', err);
  process.exit(1);
});
